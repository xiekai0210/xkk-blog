import{_ as r,M as n,p as t,q as o,R as i,t as e,N as s,a1 as a}from"./framework-5866ffd3.js";const d="/xkk-blog/img/EventLoop/1.jpg",p="/xkk-blog/img/EventLoop/2.jpg",c="/xkk-blog/img/EventLoop/3.jpg",h="/xkk-blog/img/EventLoop/4.jpg",u="/xkk-blog/img/EventLoop/5.jpg",m={},g=a('<h1 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环" aria-hidden="true">#</a> 事件循环</h1><blockquote><p>单线程是异步产生的原因，事件循环是异步的实现方式</p></blockquote><h2 id="浏览器的进程模型" tabindex="-1"><a class="header-anchor" href="#浏览器的进程模型" aria-hidden="true">#</a> 浏览器的进程模型</h2><h3 id="何为进程" tabindex="-1"><a class="header-anchor" href="#何为进程" aria-hidden="true">#</a> 何为进程？</h3><p>程序运行需要有它自己专属的内存空间，可以把这块内存空间简单的理解为进程。</p><p><img src="'+d+'" alt="1.jpg"></p><p>每个应用至少有一个进程，进程之间相互独立，即使要通信，也需要双方同意。</p><h3 id="何为线程" tabindex="-1"><a class="header-anchor" href="#何为线程" aria-hidden="true">#</a> 何为线程？</h3><p>进程理解为“空间”，线程则可以简单理解为“空间”里面的“人”，每个人的任务都是运行不同的代码块。</p><p>一个进程至少有一个线程，所以在进程开启后会自动创建一个线程来运行代码，该线程称之为主线程。如果程序需要同时执行多块代码，主线程就会启动更多的线程来执行代码，所以一个进程中可以包含多个线程，好比一个空间内可以容纳多个人来同时完成任务。</p><p><img src="'+p+'" alt="2.jpg"></p><h3 id="浏览器有哪些进程和线程" tabindex="-1"><a class="header-anchor" href="#浏览器有哪些进程和线程" aria-hidden="true">#</a> 浏览器有哪些进程和线程？</h3><p><strong>浏览器是一个多进程多线程的应用程序。</strong></p><p>为了避免相互影响，当启动浏览器后，它会自动启动多个进程。</p><p><img src="'+c+'" alt="3.jpg"> 其中，主要的进程有：</p><ul><li><p>浏览器进程</p><p>主要负责界面显示、用户交互、子进程管理等。浏览器进程内部会启动多个线程处理不同的任务。</p></li><li><p>网络进程</p><p>负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务。</p></li><li><p>渲染进程</p><ul><li>包含：渲染主线程(JS引擎线程)、GUI渲染线程(与JS互斥)、事件触发线程、定时器触发线程、网络线程。</li></ul></li></ul><p>渲染进程启动后，会开启一个渲染主线程，主线程负责执行 HTML、CSS、JS 代码。</p>',17),v={href:"https://chromium.googlesource.com/chromium/src/+/main/docs/process_model_and_site_isolation.md#historical-modes",target:"_blank",rel:"noopener noreferrer"},x=a('<h2 id="渲染主线程是如何工作的" tabindex="-1"><a class="header-anchor" href="#渲染主线程是如何工作的" aria-hidden="true">#</a> 渲染主线程是如何工作的？</h2><p>渲染主线程(JS引擎线程)是浏览器中最繁忙的线程，需要它处理的任务包括但不限于：</p><ul><li>解析 HTML</li><li>解析 CSS</li><li>计算样式</li><li>布局</li><li>处理图层</li><li>每秒把页面画 60 次</li><li>执行全局 JS 代码</li><li>执行事件处理函数</li><li>执行计时器的回调函数</li><li>......</li></ul><blockquote><p><strong>为什么渲染进程不使用多个线程来处理这些任务？ 保证数据的同步？</strong></p></blockquote><p>要处理这么多任务，必然会遇到一个问题：如何调度任务？</p><p>比如：</p><ul><li>我正在执行一个 JS 函数，执行到一半的时候用户点击了按钮，我该立即去执行点击事件的处理函数吗？</li><li>我正在执行一个 JS 函数，执行到一半的时候某个计时器到达了时间，我该立即去执行它的回调吗？</li><li>浏览器进程通知我“用户点击了按钮”，与此同时，某个计时器也到达了时间，我应该处理哪一个呢？</li><li>......</li></ul><p>渲染主线程通过排队来解决这个问题：</p><ol><li>在最开始的时候，渲染主线程会进入一个无限循环</li><li>每一次循环会检查消息队列中是否有任务存在。如果有，就取出第一个任务执行，执行完一个后进入下一次循环；如果没有，则进入休眠状态。</li><li>其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务</li></ol><p><strong>整个过程，被称之为事件循环（消息循环）</strong></p><h3 id="如何理解js的事件循环" tabindex="-1"><a class="header-anchor" href="#如何理解js的事件循环" aria-hidden="true">#</a> 如何理解JS的事件循环？</h3><p>事件循环又叫做消息循环，是浏览器渲染主线程的工作方式。</p><p>在 Chrome 的源码中，它开启一个不会结束的 for 循环，每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。</p><p>过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。</p><p>根据 W3C 官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列。不同任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定取哪一个队列的任务。但浏览器必须有一个微队列，微队列的任务一定具有最高的优先级，必须优先调度执行。</p><h2 id="何为异步" tabindex="-1"><a class="header-anchor" href="#何为异步" aria-hidden="true">#</a> 何为异步？</h2><p>代码在执行过程中，会遇到一些无法立即处理的任务，比如：</p><ul><li>计时完成后需要执行的任务 —— <code>setTimeout</code>、<code>setInterval</code></li><li>网络通信完成后需要执行的任务 -- <code>XHR</code>、<code>Fetch</code></li><li>用户操作后需要执行的任务 -- <code>addEventListener</code></li></ul><p>如果让渲染主线程等待这些任务的时机达到，就会导致主线程长期处于“阻塞”的状态，从而导致浏览器“卡死”</p><p><img src="'+h+'" alt="4.jpg"> 所以，浏览器选择异步来解决渲染主线程长期阻塞的问题。</p><p><img src="'+u+`" alt="5.jpg"></p><h3 id="如何理解js的异步" tabindex="-1"><a class="header-anchor" href="#如何理解js的异步" aria-hidden="true">#</a> 如何理解JS的异步？</h3><p>JS是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。但是渲染主线程承担着诸多的工作，渲染页面、执行 JS 都在其中运行，如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。这样一来，一方面会导致繁忙的主线程白白的消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。</p><p>所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行。</p><p>在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p><h2 id="消息队列优先级" tabindex="-1"><a class="header-anchor" href="#消息队列优先级" aria-hidden="true">#</a> 消息队列优先级</h2><p>每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。 在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。</p><p>浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行。</p><p>在目前 chrome 的实现中，至少包含了下面的队列：</p><ul><li><p>延时队列：用于存放计时器到达后的回调任务，优先级「中」</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 立即把一个函数添加到延时队列
setTimeout(函数，1000)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>交互队列：用于存放用户操作后产生的事件处理任务，优先级「高」</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 立即把一个函数添加到交互队列
xxDom.onclick = 函数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>微队列：用户存放需要最快执行的任务，优先级「最高」</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 添加任务到微队列的主要方式主要是使用 Promise、MutationObserver
// 立即把一个函数添加到微队列
Promise.resolve().then(函数)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,30);function _(b,f){const l=n("ExternalLinkIcon");return t(),o("div",null,[g,i("p",null,[e("默认情况下，Chrome浏览器会采用Process-per-site-instance模式["),i("a",v,[e("chrome官方说明文档"),s(l)]),e("]，就是你打开一个网站，然后从这个网站链开的一系列网站都属于同一个渲染进程。")]),x])}const S=r(m,[["render",_],["__file","index.html.vue"]]);export{S as default};
